data = read.csv('NPI.csv')
data
file = read.csv('NPI.csv')[2:5]
data = c()
for (i in 1:length(file[,1])){
data = c(data,file[i,])
}
data
data[1,]
file[1,]
c(data[1,],data[2,])
c(file[1,],file[2,])
as.numeric(data[1,])
as.numeric(file[1,])
file[1,]
file = read.table('NPI.txt')[2:5]
file = read.table('NPI')[2:5]
getwd
getwd()
setwd("setwd("/Users/cryan/Desktop/Assignment/STAT-2302/project")
)
""
setwd("/Users/cryan/Desktop/Assignment/STAT-2302/project")
file = read.table('NPI')[2:5]
file = read.table('NPI.txt')[2:5]
file = read.table('NPI.txt',fill = T)[2:5]
file
data = c()
for (i in 1:length(file[,1])){
data = c(data,file[i,])
}
data
file <- as.numeric(as.matrix(t(file)))
file
NPI <- read.table("NPI.txt",fill = TRUE,header = TRUE)[,2:5]
NPI <- as.numeric(as.matrix(t(NPI)))
NPI
NPI <- read.table("NPI.txt",fill = TRUE,header = TRUE)[,2:5]
NPI
as.matric(NPI)
as.matrix(NPI)
NPI <- as.numeric(as.matrix(NPI))
NPI
as.matrix(NPI)
NPI <- read.table("NPI.txt",fill = TRUE,header = TRUE)[,2:5]
as.matrix(NPI)
NPI <- as.numeric(as.matrix(NPI))
NPI <- read.table("NPI.txt",fill = TRUE,header = TRUE)[,2:5]
NPI
data = c()
for (i in 1:length(file[,1])){
data = c(data,as.numeric(file[i,])
}
data = c()
for (i in 1:length(file[,1])){
data = c(data,as.numeric(file[i,]))
}
for (i in 1:length(NPI[,1])){
data = c(data,as.numeric(NPI[i,]))
}
data
NPI <- as.matrix(NPI)
NPI <- read.table("NPI.txt",fill = TRUE,header = TRUE)[,2:5]
NPI <- as.matrix(NPI)
data = c()
for (i in 1:length(NPI[,1])){
data = c(data,as.numeric(NPI[i,]))
}
data
NPI <- read.table("NPI.txt",fill = TRUE,header = TRUE)[,2:5]
NPI <- as.matrix(NPI)
NPI
NPI[1,]
as.numeric(NPI[1,])
NPI <- read.csv("NPI.csv",fill = TRUE,header = TRUE)[,2:5]
NPI
data = c()
for (i in 1:length(NPI[,1])){
data = c(data,as.numeric(NPI[i,]))
}
data
data[-1]
data[-length(data)]
NPI <- read.csv("NPI.csv",fill = TRUE,header = TRUE)[,2:5]
data = c()
for (i in 1:length(NPI[,1])){
data = c(data,as.numeric(NPI[i,]))
}
data =data[-length(data)]
data
NPI
data
library('itsmr')
library('forecast')
tsdisplay(data)
tsdisplay(log(data))
tsdisplay(data^2)
tsdisplay(log(data^2))
tsdisplay(data)
mean(NPI[,1])
mean(NPI[,2])
mean(NPI[,3])
mean(NPI[,4])
mean(NPI[,4],na.rm = T)
NPI[,1] =NPI[,1] - mean(NPI[,1])
NPI[,2] = NPI[,2] - mean(NPI[,2])
NPI[,3] = NPI[,3] - mean(NPI[,3])
NPI[,4] = NPI[,4] - mean(NPI[,4],na.rm = T)
data = c()
for (i in 1:length(NPI[,1])){
data = c(data,as.numeric(NPI[i,]))
}
data
data =data[-length(data)] #the last elemet is NA corresponding to the Q4 of 2015
tsdisplay(data)
mean(NPI[,1])
NPI <- read.csv("NPI.csv",fill = TRUE,header = TRUE)[,2:5]
mean(NPI[,1])
NPI[,1]
NPI <- read.csv("NPI.csv",fill = TRUE,header = TRUE)[,2:5]
data = c()
for (i in 1:length(NPI[,1])){
data = c(data,as.numeric(NPI[i,]))
}
data =data[-length(data)] #the last elemet is NA corresponding to the Q4 of 2015
tsdisplay(data)
?auto.arima
model = auto.arima(data,trace = T,ic = 'aicc',stepwise = T,allowmean=T,allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
model = auto.arima(data,trace = T,ic = 'aicc',stepwise = F,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
model
model = auto.arima(data,trace = T,ic = 'aicc',stepwise = F,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
model = auto.arima(data,trace = T,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
plot(diff(data))
model = auto.arima(diff(data),trace = T,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
?auto.arima
plot.Arima(model)
model
model = auto.arima(data,trace = T,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
plot.Arima(model)
```
model
pvalue = (1-pnorm(abs(model$coef)/sqrt(diag(model$var.coef))))*2;pvalue
?test
test(model$residuals)
model = auto.arima(diff(data),trace = T,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
model = arima(data,c(5,1,3))
test(model$residuals)
model$residuals
plot(model$residuals)
plot(model$residuals)
model$residuals
test(model$residuals)
?auto.arima
model = auto.arima(data,d = 1,trace = T,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
plot.Arima(model)
model = auto.arima(data,d = c(1,2),trace = T,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
model = auto.arima(data,d = 0,trace = T,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
model = auto.arima(data,d = 1,trace = T,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
model = auto.arima(data,trace = T,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.order = 10)
model
model = auto.arima(data,trace = T,d =1,ic = 'aicc',stepwise = T,allowmean=T,
allowdrift = F,seasonal = F,max.p =5,max.q=5,max.d=3)
model
plot(data)
setwd("/Users/cryan/Desktop/Assignment/STAT-2302/project2")
library('itsmr')
library('forecast')
read.table('data.txt')
read.table('data.txt',fill = TRUE)
read.table('data.txt',fill = TRUE)[1]
read.table('data.xls')
read.table('data.xls')
read.table('data.xls',fill = TURE)
read.table('data.xls',fill = True)
read.table('data.xls')
read.table('data.csv')
read.table('data.csv')[,1]
read.table('data.csv')[,2]
read.table('data.csv')[1,]
read.table('data.csv')[1,]
read.table('data.csv')[2,]
read.table('data.csv')[2,1]
read.table('data.txt')[2,1]
read.table('data.txt',fill = TRUE)[2,1]
read.table('data.txt',fill = TRUE)
data <- read.table("data.txt",fill = TRUE)
data
data[1,]
data[2,]
data[3,]
data[4,]
data[5,]
data[6,]
data <- read.table("data.txt",fill = TRUE)[,2]
data
na.omit(data)
na.omit(data)[1]
na.omit(data)[2]
na.omit(data)[3]
na.omit(data)
as.numeric(na.omit(data))
data = as.numeric(na.omit(data))
data
plot(data)
library('tseries')
data_last = tail(data,1)
data_last
len(data)
length(data)
data
data_last
data = data[1:(length(data)-1)]
data
tsdisplay(log(data),points = F)
tsdisplay(diff(log(data)),points = F)
tsdisplay(log(data),points = F)
tsdisplay(diff(log(data)),points = F)
tsdisplay(diff(log(data),2),points = F)
auto.arima(diff(log(data),2))
auto.arima(diff(log(data),1))
model= auto.arima(data,d = 1,parallel = F,trace = T,ic = "aicc",stepwise = T
,allowmean = F,allowdrift = F,seasonal =F,max.p = 2,max.q=2 )
m.resid = model$residuals
plot(m.resid)
model= auto.arima(data,d = 1,parallel = F,trace = T,ic = "aicc",stepwise = T
,allowmean = F,allowdrift = F,seasonal =F,max.p = 3,max.q=3 )
m.resid = model$residuals
plot(m.resid)
m.resid = model$residuals
m.fore = forecast::forecast(model,h=1,level = 95)
m.fit = fitted(model)
model= auto.arima(data,d = 1,parallel = F,trace = T,ic = "aicc",stepwise = T
,allowmean = F,allowdrift = F,seasonal =F,max.p = 2,max.q=2 )
m.resid = model$residuals
m.fore = forecast::forecast(model,h=1,level = 95)
m.fit = fitted(model)
tsdisplay(m.resid,points = F)
tsdisplay(m.resid^2,points = F)
tsdisplay(m.resid,points = F)
AICc_arch <- function(data,order)
{
N = length(data)-1
res = c()
for (i in order[1]:order[2])
{
if (i == 0) {
loglik = -0.5*N*(1 + log(2*pi*mean(data^2)))
aicc = -2*loglik+2*(i +1)*N/(N-i-2)
res = rbind(res,c(i,loglik,aicc) )}
else{
loglik= logLik(garch(data,c(0,i),control = garch.control(trace = F)))
aicc = -2*loglik+2*(i +1)*N/(N-i-2)
res = rbind(res,c(i,loglik,aicc ))
}
}
colnames(res) = c('order q','log lik','AICc')
res
}
res = AICc_arch(m.resid,c(0,10));res
m.garch = garch(m.resid,c(1,1),control =garch.control(trace = F))
N = length(m.resid)-1
m.garch.loglik = logLik(m.garch)
m.garch.aicc = -2*m.garch.loglik+2*(2 +1)*N/(N-2-2);m.garch.aicc[1]
summary(m.garch);m.garch.loglik
res
m.garch.aicc[1]
summary(m.garch);m.garch.loglik
cond_var = tail(m.garch$fit[,1],1)
h_f1 = m.garch$coef[1]+m.garch$coef[2]* tail(m.resid,1)^2 + m.garch$coef[3]* tail(m.garch$fit[,1]^2,1);
m.garch.fore= m.fore$mean[1] + c(0,-qnorm(0.975)*sqrt(h_f1),qnorm(0.975)*sqrt(h_f1));
colnames(m.garch.fore) = colnames(m.fore)
m.fore;m.garch.fore
data_last
tail(data,1)
plot(m.garch$fit[,1]^2)
ht = m.garch$fit[,1]^2
length(data)
conf_int = matrix(0, 7550, 3)
conf_int[,1] = m.fit
conf_int[,2:3] = m.fit + cbind(-qnorm(0.975)*sqrt(ht),qnorm(0.975)*sqrt(ht))
plot(conf_int[,2],type = 'l',ylim = c(39,53),ylab = c(''));par(new = T)
plot(conf_int[,3],type = 'l',ylim = c(39,53),ylab =c(''));par(new = T)
polygon(c(1:2235,rev(1:2235)),c(conf_int[,3],rev(conf_int[,2])),col="grey");par(new = T)
plot(conf_int[,1],type = 'l',ylim = c(39,53),col = 'red',ylab = c('log exchange'))
plot(conf_int[,2],type = 'l',ylab = c(''));par(new = T)
plot(conf_int[,3],type = 'l',ylim = c(0,140,ylab =c(''));par(new = T)
plot(conf_int[,2],type = 'l',ylim = c(0,140),ylab = c('')));par(new = T)
plot(conf_int[,2],type = 'l',ylim = c(0,140),ylab = c(''));par(new = T)
plot()
lpot(1)
plot(1)
plot(1)
plot(conf_int[,2],type = 'l',ylim = c(0,140),ylab = c(''));par(new = T)
plot(conf_int[,3],type = 'l',ylim = c(0,140),ylab =c(''));par(new = T)
polygon(c(1:2235,rev(1:2235)),c(conf_int[,3],rev(conf_int[,2])),col="grey");par(new = T)
polygon(c(1:7550,rev(1:7550)),c(conf_int[,3],rev(conf_int[,2])),col="grey");par(new = T)
plot(conf_int[,1],type = 'l',ylim = c(39,53),col = 'red',ylab = c('log exchange'))
plot(conf_int[,1],type = 'l',ylim =,ylim = c(0,140),col = 'red',ylab = c('log exchange'))
plot(conf_int[,1],type = 'l',ylim = c(0,140),col = 'red',ylab = c('log exchange'))
plot(conf_int[,2],type = 'l',ylim = c(0,140),ylab = c(''));par(new = T)
plot(conf_int[,3],type = 'l',ylim = c(0,140),ylab =c(''));par(new = T)
polygon(c(1:7550,rev(1:7550)),c(conf_int[,3],rev(conf_int[,2])),col="grey");par(new = T)
plot(conf_int[,1],type = 'l',ylim = c(0,140),col = 'red',ylab = c('log exchange'))
m.garch.resid = m.garch$residuals
qqnorm(na.omit(m.garch.resid))
cur = na.omit(m.garch.resid)
sum(abs(cur)>1.96)/length(cur)
data_last
